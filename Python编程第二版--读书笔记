
网络编程模板
《Python编程第二版》


server端

#!usr/bin/env python
# _*_coding:utf-8_*_

import SocketServer
import os
import time
# HOST = '192.168.100.100'
HOST = '127.0.0.1'
PORT = 9005

class MySocket(SocketServer.BaseRequestHandler):

    def handle(self):
        recv_value = self.request.recv(1024)
        os.system("start cmd /k %s" % recv_value)
        self.request.send("i am server result is %s" % recv_value)
        while True:
            #
            # 这儿写自己处理的流程
            #
            #
            recv_value = self.request.recv(1024)
            print("client send cmd is %s  \n" % recv_value)
            result = os.popen(recv_value).read()
            print("im return result is %s \n" % result)
            self.request.send("i am server result is %s \n" % result)
            
            
if __name__ == "__main__":
    s = SocketServer.TCPServer((HOST, PORT), MySocket)
    s.serve_forever()
    
 
 
 
 Client端
 
#!usr/bin/env python
# _*_coding:utf-8_*_

import socket
import commands
import os
import time
from __builtin__ import raw_input

#HOST = '192.168.100.12'
HOST = '127.0.0.1'
PORT = 9005

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))

#cmd = " D:/iperf/iperfTool/First_Run.bat"
cmd="hello world"
input_value = str(cmd)
s.send(input_value)
result = s.recv(1024)
print("sever return massage: %s" % result)

time.sleep(5)

while True:
    cmd = raw_input("input values:")
    print("----------" + str(cmd))
    input_value = str(cmd)
    s.send(input_value)
    result = s.recv(1024)
    print("sever return massage: %s" % result)
    


#---------------------------参考CSDN博客---------------------------
#            如果需要做更详细的处理   需要了解Python logging的说明文档
#------------------------------------------------------------------

#!/usr/bin/env python
#~*~ coding:utf-8 -*-
__author__=" Test"

import logging
import getpass
import sys
import os

#定义Log类
class Mylog(object):
    '''
    #===================================================================================
    #   @Method:        创建 Mylog() 类
    #   @Func:          可以调用产生日志文件到指定文件夹下
    #                   默认  mylog=Mylog() 'd://'+'xxx123'+'.log'   D盘下产生xx123.log日志文件
    #                   设置  mylog=Mylog('d://AA/BB'+'XX'+'.log')    D盘AA/BB文件夹下产生 xx.log日志文件
    #===================================================================================           
    '''
    
    def __init__(self,logFile='d://'+'xxx123'+'.log'):
        
        user=getpass.getuser()
        self.logger=logging.getLogger(user)
        self.logger.setLevel(logging.DEBUG)
        #logFile='./'+sys.argv[0][0:-3]+'.log'   //linux
        #logFile='d://'+'xxxx123'+'.log'
        formatter=logging.Formatter('%(asctime)-12s %(levelname)-8s %(name)-10s %(message)-12s' )

        ''' 日志显示到屏幕上并输出到日志文件内'''
        logHand=logging.FileHandler(logFile) #初始化新log文件
        logHand.setFormatter(formatter)      #设置日志格式
        logHand.setLevel(logging.ERROR)      #设置优先级

        logHandSt=logging.StreamHandler()    #创建streamHander可以指定输出到sys.stderr  sys.stdout 或者文件
        logHandSt.setFormatter(formatter)

        self.logger.addHandler(logHand)
        self.logger.addHandler(logHandSt)


    ''' 日志的5个级别对应以下的五个函数 '''
    def debug(self,msg):
        self.logger.debug(msg)
        
    def info(self,msg):
        self.logger.info(msg)
    def warn(self,msg):
        self.logger.warn(msg)
    def error(self,msg):
        self.logger.error(msg)
    def critical(self,msg):
        self.logger.critical(msg)

if __name__=='__main__':

    mylog=Mylog(logFile='d://AA//'+'xxx234'+'.log')
    mylog.debug("I'm debug")
    mylog.info("I'm info")
    mylog.warn("I'm warn")
    mylog.error("I'm error")
    mylog.critical("I'm critical") 
    
    
    
    
    
    
    
    
    
    
    
    
